/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type BackgroundBlur = BackgroundBlurV1
/**
 * [DEPRECATED] Was used in model v0. Check if we can remove it.
 */
export type EntityType = string
export type VisibleInViewport = boolean
export type PropertiesExpanded = boolean
export type BlurRadius = number
export type EffectType =
  | 'DROP_SHADOW'
  | 'LAYER_BLUR'
  | 'BACKGROUND_BLUR'
  | 'INNER_SHADOW'
export type DropShadow = DropShadowV1
export type ShadowRadius = number
/**
 * @minItems 4
 * @maxItems 4
 */
export type ShadowColor = [number, number, number, number]
/**
 * @minItems 2
 * @maxItems 2
 */
export type ShadowOffset = [number, number]
export type ShadowSpread = number
export type BlendMode =
  | 'PASS_THROUGH'
  | 'NORMAL'
  | 'DARKEN'
  | 'MULTIPLY'
  | 'LINEAR_BURN'
  | 'COLOR_BURN'
  | 'LIGHTEN'
  | 'SCREEN'
  | 'LINEAR_DODGE'
  | 'COLOR_DODGE'
  | 'OVERLAY'
  | 'SOFT_LIGHT'
  | 'HARD_LIGHT'
  | 'DIFFERENCE'
  | 'EXCLUSION'
  | 'HUE'
  | 'SATURATION'
  | 'COLOR'
  | 'LUMINOSITY'
export type InnerShadow = InnerShadowV1
export type LayerBlur = LayerBlurV1
export type MatrixTransformKey = MatrixTransformKeyV1
export type Time = number
/**
 * @minItems 2
 * @maxItems 2
 */
export type MatrixTransform = [
  [number, number, number],
  [number, number, number],
]
/**
 * @minItems 4
 * @maxItems 4
 */
export type TimingCurve = [number, number, number, number]
/**
 * @minItems 3
 * @maxItems 3
 */
export type SpringCurve = [number, number, number]
/**
 * Holds ID of the animation preset to further work. Probably in future would be changed to reference instead of plain string.
 */
export type PresetId = string
export type NumberKey = NumberKeyV1
export type Number = number
export type Point2DKey = Point2DKeyV1
/**
 * @minItems 2
 * @maxItems 2
 */
export type Point2D = [number, number]
export type RgbaKey = RgbaKeyV1
/**
 * @minItems 4
 * @maxItems 4
 */
export type Rgba = [number, number, number, number]
export type SpatialPoint2DKey = SpatialPoint2DKeyV1
/**
 * @minItems 6
 * @maxItems 6
 */
export type SpatialPoint2D = [number, number, number, number, number, number]
export type CurveStyle = CurveStyleV1
export type Name = string
export type ExportPreset = ExportPresetV1 | ExportPresetV2
/**
 * [DEPRECATED] Use RenderScaleComponent instead. In the next version we are supporting any render scales (eg using numbers).
 * Used to determine exporting file scaling factor
 */
export type RenderScaleType =
  | '0.5x'
  | '0.75x'
  | '1x'
  | '1.5x'
  | '2x'
  | '3x'
  | '4x'
/**
 * Used to determine exporting file format
 */
export type RenderType =
  | 'mp4'
  | 'webm'
  | 'ogv'
  | 'lottie'
  | 'dotlottie'
  | 'tgs'
  | 'svg'
  | 'gif'
  | 'png'
/**
 * Define custom suffix for rendered file
 */
export type RenderSuffix = string
/**
 * Used to determine exporting file scaling factor
 */
export type RenderScale = number
export type Version = number
export type Expression = ExpressionV1
export type Enabled = boolean
export type Ellipse = EllipseV1 | EllipseV2
export type StartAngle = number
export type EndAngle = number
export type InnerRadius = number
export type NodeType =
  | 'GENERIC'
  | 'BOOLEAN_OPERATION'
  | 'COMPONENT'
  | 'ELLIPSE'
  | 'INSTANCE'
  | 'FRAME'
  | 'GROUP'
  | 'LINE'
  | 'POLYGON'
  | 'RECTANGLE'
  | 'STAR'
  | 'TEXT'
  | 'VECTOR'
export type NodeColor =
  | 'BLUE'
  | 'PURPLE'
  | 'PINK'
  | 'GREEN'
  | 'TURQOUISE'
  | 'RED'
  | 'ORANGE'
  | 'YELLOW'
  | 'GREY'
  | 'NONE'
export type Solo = 'NONE' | 'VIEWPORT' | 'TIMELINE' | 'BOTH'
export type Locked = boolean
/**
 * Determine if current entity is mask or not
 */
export type Mask = boolean
export type StrokeAlign = 'CENTER' | 'INSIDE' | 'OUTSIDE'
export type StrokeCapStart =
  | 'NONE'
  | 'ROUND'
  | 'SQUARE'
  | 'ARROW_LINES'
  | 'ARROW_EQUILATERAL'
  | 'TRIANGLE_FILLED'
  | 'DIAMOND_FILLED'
  | 'CIRCLE_FILLED'
export type StrokeCapEnd =
  | 'NONE'
  | 'ROUND'
  | 'SQUARE'
  | 'ARROW_LINES'
  | 'ARROW_EQUILATERAL'
  | 'TRIANGLE_FILLED'
  | 'DIAMOND_FILLED'
  | 'CIRCLE_FILLED'
export type StrokeJoin = 'MITER' | 'BEVEL' | 'ROUND'
export type StrokeWeight = number
export type Dash = number
export type DashOffset = number
export type Gap = number
export type SmoothCornerRadius = boolean
export type CornerRadius = number
/**
 * Determine anchor point of the layer and how it should behave
 * in terms of scale, size or rotation transformations.
 *
 * @minItems 2
 * @maxItems 2
 */
export type AnchorPoint = [number, number]
/**
 * @minItems 6
 * @maxItems 6
 */
export type Position = [number, number, number, number, number, number]
export type Rotation = number
export type Opacity = number
/**
 * @minItems 2
 * @maxItems 2
 */
export type Scale = [number, number]
export type ScaleLocked = boolean
/**
 * @minItems 2
 * @maxItems 2
 */
export type Size = [number, number]
export type SizeLocked = boolean
/**
 * @minItems 2
 * @maxItems 2
 */
export type Skew = [number, number]
export type StartTime = number
export type Duration = number
export type TrimStart = number
export type TrimEnd = number
export type TrimOffset = number
export type PathReversed = boolean
/**
 * Holds initial node id so data can be copied on project creation
 */
export type InitialNodeId = string
/**
 * Stores as stringified json. Used to set additional data to entities.
 */
export type Metadata = string
export type Frame = FrameV1 | FrameV2
export type ClipContent = boolean
export type ChildrenExpanded = boolean
export type IndividualStrokeWeight = boolean
export type StrokeTopWeight = number
export type StrokeRightWeight = number
export type StrokeBottomWeight = number
export type StrokeLeftWeight = number
export type IndividualCornerRadius = boolean
/**
 * Determine if frame is an entry point of a render tree
 */
export type Entry = boolean
export type TopLeftCornerRadius = number
export type TopRightCornerRadius = number
export type BottomRightCornerRadius = number
export type BottomLeftCornerRadius = number
export type Group = GroupV1 | GroupV2
export type Instance = InstanceV1 | InstanceV2
/**
 * ID of the main node, stores the Aninix ID. Works similar to `mainComponent` property in Figma.
 */
export type MainNodeComponentId = string
export type Line = LineV1 | LineV2
export type Polygon = PolygonV1 | PolygonV2
export type PointCount = number
export type Rectangle = RectangleV1 | RectangleV2
export type Root = RootV1
export type Fps = number
export type CoverTime = number
export type Star = StarV1 | StarV2
export type Text = TextV1 | TextV2
/**
 * @minItems 1
 * @maxItems 1
 */
export type VectorPaths = [
  {
    windingRule?: 'NONZERO' | 'EVENODD' | 'NONE'
    data?: string
    [k: string]: unknown
  },
]
export type SizeBehaviour = 'FILL' | 'IGNORE'
/**
 * The horizontal alignment of the text with respect to the textbox.
 */
export type TextAlignHorizontal = 'LEFT' | 'CENTER' | 'RIGHT' | 'JUSTIFIED'
/**
 * The vertical alignment of the text with respect to the textbox.
 */
export type TextAlignVertical = 'TOP' | 'CENTER' | 'BOTTOM'
/**
 * The behavior of how the size of the text box adjusts to fit the characters.
 */
export type TextAutoResize = 'NONE' | 'WIDTH_AND_HEIGHT' | 'HEIGHT' | 'TRUNCATE'
/**
 * Whether this text node will truncate with an ellipsis when the text node size is smaller than the text inside.
 */
export type TextTruncation = 'DISABLED' | 'ENDING'
/**
 * The indentation of paragraphs (offset of the first line from the left).
 */
export type ParagraphIndent = number
/**
 * The vertical distance between paragraphs.
 */
export type ParagraphSpacing = number
/**
 * The vertical distance between lines of a list.
 */
export type ListSpacing = number
/**
 * Whether punctuation, like quotation marks, hangs outside the text box.
 */
export type HangingPunctuation = boolean
/**
 * Whether numbered list counters or unordered list bullets hang outside the text box.
 */
export type HangingList = boolean
/**
 * Whether updating the characters in the text node should update the name of the node. If this is set to true, name will be auto-derived from characters.
 */
export type AutoRename = boolean
export type Vector = VectorV1 | VectorV2
export type ColorStop = ColorStopV1
export type Progress = number
export type ImagePaint = ImagePaintV1
export type PaintType =
  | 'SOLID'
  | 'GRADIENT_LINEAR'
  | 'GRADIENT_RADIAL'
  | 'IMAGE'
  | 'VIDEO'
export type Hash = string
export type ScaleType = 'FILL' | 'FIT' | 'CROP' | 'TILE'
/**
 * @minItems 2
 * @maxItems 2
 */
export type ImageTransform = [
  [number, number, number],
  [number, number, number],
]
export type ScalingFactor = number
export type LinearGradientPaint = LinearGradientPaintV1
/**
 * @minItems 2
 * @maxItems 2
 */
export type GradientTransform = [
  [number, number, number],
  [number, number, number],
]
export type RadialGradientPaint = RadialGradientPaintV1
export type SolidPaint = SolidPaintV1
export type VideoPaint = VideoPaintV1
/**
 * @minItems 2
 * @maxItems 2
 */
export type VideoTransform = [
  [number, number, number],
  [number, number, number],
]
export type StyledTextSegment = StyledTextSegmentV1
/**
 * The characters in the range of text with the same styles.
 */
export type Characters = string
/**
 * Start index (inclusive) of the range of characters.
 */
export type StartIndex = number
/**
 * End index (exclusive) of the range of characters.
 */
export type EndIndex = number
/**
 * The size of the font. Has minimum value of 1.
 */
export type FontSize = number
/**
 * The font family (e.g. "Inter").
 */
export type FontName = string
/**
 * Font style (e.g. "Regular").
 */
export type FontStyle = string
/**
 * Whether the text is underlined or has a strikethrough.
 */
export type TextDecoration = 'NONE' | 'UNDERLINE' | 'STRIKETHROUGH'
/**
 * Overrides the case of the raw characters in the text node.
 */
export type TextCase =
  | 'ORIGINAL'
  | 'UPPER'
  | 'LOWER'
  | 'TITLE'
  | 'SMALL_CAPS'
  | 'SMALL_CAPS_FORCED'
export type LetterSpacingUnit = 'PIXELS' | 'PERCENT'
/**
 * The spacing between the individual characters.
 */
export type LetterSpacingValue = number
/**
 * The list settings.
 */
export type TextListOptions = 'NONE' | 'ORDERED' | 'UNORDERED'
/**
 * The indentation.
 */
export type Indetation = number
/**
 * When line height unit is not applied to entity then line height treat as `AUTO` which similar to how CSS works
 */
export type LineHeightUnit = 'AUTO' | 'PIXELS' | 'PERCENT'
/**
 * The spacing between the lines in a paragraph of text.
 */
export type LineHeightValue = number

/**
 * Aninix's snapshot types schema definition
 */
export interface AninixSnapshot {
  schemaVersion: 2
  entities: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[a-zA-Z0-9]+$".
     */
    [k: string]:
      | BackgroundBlur
      | DropShadow
      | InnerShadow
      | LayerBlur
      | MatrixTransformKey
      | NumberKey
      | Point2DKey
      | RgbaKey
      | SpatialPoint2DKey
      | CurveStyle
      | ExportPreset
      | Expression
      | Ellipse
      | Frame
      | Group
      | Instance
      | Line
      | Polygon
      | Rectangle
      | Root
      | Star
      | Text
      | Vector
      | ColorStop
      | ImagePaint
      | LinearGradientPaint
      | RadialGradientPaint
      | SolidPaint
      | VideoPaint
      | StyledTextSegment
  }
  [k: string]: unknown
}
export interface BackgroundBlurV1 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'backgroundBlur'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 1
  components: {
    entityType: EntityType
    visibleInViewport: VisibleInViewport
    propertiesExpanded: PropertiesExpanded
    blurRadius: BlurRadius
    effectType: EffectType
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface DropShadowV1 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'dropShadow'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 1
  components: {
    entityType: EntityType
    visibleInViewport: VisibleInViewport
    propertiesExpanded: PropertiesExpanded
    shadowRadius: ShadowRadius
    shadowColor: ShadowColor
    shadowOffset: ShadowOffset
    shadowSpread: ShadowSpread
    effectType: EffectType
    blendMode: BlendMode
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface InnerShadowV1 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'innerShadow'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 1
  components: {
    entityType: EntityType
    visibleInViewport: VisibleInViewport
    propertiesExpanded: PropertiesExpanded
    shadowRadius: ShadowRadius
    shadowColor: ShadowColor
    shadowOffset: ShadowOffset
    shadowSpread: ShadowSpread
    effectType: EffectType
    blendMode: BlendMode
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface LayerBlurV1 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'layerBlur'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 1
  components: {
    entityType: EntityType
    visibleInViewport: VisibleInViewport
    propertiesExpanded: PropertiesExpanded
    blurRadius: BlurRadius
    effectType: EffectType
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface MatrixTransformKeyV1 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'matrixTransformKey'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 1
  components: {
    entityType: EntityType
    time: Time
    matrixTransform: MatrixTransform
    timingCurve?: TimingCurve
    springCurve?: SpringCurve
    presetId?: PresetId
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface NumberKeyV1 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'numberKey'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 1
  components: {
    entityType: EntityType
    time: Time
    number: Number
    timingCurve?: TimingCurve
    springCurve?: SpringCurve
    presetId?: PresetId
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface Point2DKeyV1 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'point2dKey'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 1
  components: {
    entityType: EntityType
    time: Time
    point2d: Point2D
    timingCurve?: TimingCurve
    springCurve?: SpringCurve
    presetId?: PresetId
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface RgbaKeyV1 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'rgbaKey'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 1
  components: {
    entityType: EntityType
    time: Time
    rgba: Rgba
    timingCurve?: TimingCurve
    springCurve?: SpringCurve
    presetId?: PresetId
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface SpatialPoint2DKeyV1 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'spatialPoint2dKey'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 1
  components: {
    entityType: EntityType
    time: Time
    spatialPoint2d: SpatialPoint2D
    timingCurve?: TimingCurve
    springCurve?: SpringCurve
    presetId?: PresetId
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface CurveStyleV1 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'curveStyle'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 1
  components: {
    entityType: EntityType
    name: Name
    timingCurve?: TimingCurve
    springCurve?: SpringCurve
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface ExportPresetV1 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'exportPreset'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 1
  components: {
    entityType: EntityType
    renderScaleType: RenderScaleType
    renderType: RenderType
    renderSuffix: RenderSuffix
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface ExportPresetV2 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'exportPreset'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 2
  components: {
    entityType: EntityType
    renderScale: RenderScale
    renderType: RenderType
    renderSuffix: RenderSuffix
    version: Version
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface ExpressionV1 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'expression'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 1
  components: {
    entityType: EntityType
    expression: Expression
    enabled: Enabled
    version: Version
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface EllipseV1 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'ellipse'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 1
  components: {
    name: Name
    entityType: EntityType
    startAngle: StartAngle
    endAngle: EndAngle
    innerRadius: InnerRadius
    nodeType: NodeType
    nodeColor: NodeColor
    solo: Solo
    locked: Locked
    visibleInViewport: VisibleInViewport
    propertiesExpanded: PropertiesExpanded
    blendMode: BlendMode
    mask: Mask
    strokeAlign: StrokeAlign
    strokeCapStart: StrokeCapStart
    strokeCapEnd: StrokeCapEnd
    strokeJoin: StrokeJoin
    strokeWeight: StrokeWeight
    dash: Dash
    dashOffset: DashOffset
    gap: Gap
    smoothCornerRadius: SmoothCornerRadius
    cornerRadius: CornerRadius
    anchorPoint: AnchorPoint
    position: Position
    rotation: Rotation
    opacity: Opacity
    scale: Scale
    scaleLocked: ScaleLocked
    size: Size
    sizeLocked: SizeLocked
    skew: Skew
    startTime?: StartTime
    duration?: Duration
    trimStart?: TrimStart
    trimEnd?: TrimEnd
    trimOffset?: TrimOffset
    pathReversed?: PathReversed
    initialNodeId?: InitialNodeId
    metadata?: Metadata
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface EllipseV2 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'ellipse'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 2
  components: {
    name: Name
    entityType: EntityType
    startAngle: StartAngle
    endAngle: EndAngle
    innerRadius: InnerRadius
    nodeType: NodeType
    nodeColor: NodeColor
    solo: Solo
    locked: Locked
    visibleInViewport: VisibleInViewport
    propertiesExpanded: PropertiesExpanded
    blendMode: BlendMode
    mask: Mask
    strokeAlign: StrokeAlign
    strokeCapStart: StrokeCapStart
    strokeCapEnd: StrokeCapEnd
    strokeJoin: StrokeJoin
    strokeWeight: StrokeWeight
    dash: Dash
    dashOffset: DashOffset
    gap: Gap
    smoothCornerRadius: SmoothCornerRadius
    cornerRadius: CornerRadius
    anchorPoint: AnchorPoint
    position: Position
    rotation: Rotation
    opacity: Opacity
    scale: Scale
    scaleLocked: ScaleLocked
    size: Size
    sizeLocked: SizeLocked
    skew: Skew
    version: Version
    startTime?: StartTime
    duration?: Duration
    trimStart?: TrimStart
    trimEnd?: TrimEnd
    trimOffset?: TrimOffset
    pathReversed?: PathReversed
    initialNodeId?: InitialNodeId
    metadata?: Metadata
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface FrameV1 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'frame'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 1
  components: {
    name: Name
    entityType: EntityType
    clipContent: ClipContent
    nodeType: NodeType
    nodeColor: NodeColor
    solo: Solo
    locked: Locked
    visibleInViewport: VisibleInViewport
    propertiesExpanded: PropertiesExpanded
    childrenExpanded: ChildrenExpanded
    blendMode: BlendMode
    mask: Mask
    strokeAlign: StrokeAlign
    strokeCapStart: StrokeCapStart
    strokeCapEnd: StrokeCapEnd
    strokeJoin: StrokeJoin
    strokeWeight: StrokeWeight
    individualStrokeWeight: IndividualStrokeWeight
    strokeTopWeight: StrokeTopWeight
    strokeRightWeight: StrokeRightWeight
    strokeBottomWeight: StrokeBottomWeight
    strokeLeftWeight: StrokeLeftWeight
    dash: Dash
    dashOffset: DashOffset
    gap: Gap
    smoothCornerRadius: SmoothCornerRadius
    cornerRadius: CornerRadius
    individualCornerRadius: IndividualCornerRadius
    anchorPoint: AnchorPoint
    position: Position
    rotation: Rotation
    opacity: Opacity
    scale: Scale
    scaleLocked: ScaleLocked
    size: Size
    sizeLocked: SizeLocked
    skew: Skew
    entry?: Entry
    topLeftCornerRadius?: TopLeftCornerRadius
    topRightCornerRadius?: TopRightCornerRadius
    bottomRightCornerRadius?: BottomRightCornerRadius
    bottomLeftCornerRadius?: BottomLeftCornerRadius
    startTime?: StartTime
    duration?: Duration
    trimStart?: TrimStart
    trimEnd?: TrimEnd
    trimOffset?: TrimOffset
    pathReversed?: PathReversed
    initialNodeId?: InitialNodeId
    metadata?: Metadata
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface FrameV2 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'frame'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 2
  components: {
    name: Name
    entityType: EntityType
    clipContent: ClipContent
    nodeType: NodeType
    nodeColor: NodeColor
    solo: Solo
    locked: Locked
    visibleInViewport: VisibleInViewport
    propertiesExpanded: PropertiesExpanded
    childrenExpanded: ChildrenExpanded
    blendMode: BlendMode
    mask: Mask
    strokeAlign: StrokeAlign
    strokeCapStart: StrokeCapStart
    strokeCapEnd: StrokeCapEnd
    strokeJoin: StrokeJoin
    strokeWeight: StrokeWeight
    individualStrokeWeight: IndividualStrokeWeight
    strokeTopWeight: StrokeTopWeight
    strokeRightWeight: StrokeRightWeight
    strokeBottomWeight: StrokeBottomWeight
    strokeLeftWeight: StrokeLeftWeight
    dash: Dash
    dashOffset: DashOffset
    gap: Gap
    smoothCornerRadius: SmoothCornerRadius
    cornerRadius: CornerRadius
    individualCornerRadius: IndividualCornerRadius
    anchorPoint: AnchorPoint
    position: Position
    rotation: Rotation
    opacity: Opacity
    scale: Scale
    scaleLocked: ScaleLocked
    size: Size
    sizeLocked: SizeLocked
    skew: Skew
    version: Version
    entry?: Entry
    topLeftCornerRadius?: TopLeftCornerRadius
    topRightCornerRadius?: TopRightCornerRadius
    bottomRightCornerRadius?: BottomRightCornerRadius
    bottomLeftCornerRadius?: BottomLeftCornerRadius
    startTime?: StartTime
    duration?: Duration
    trimStart?: TrimStart
    trimEnd?: TrimEnd
    trimOffset?: TrimOffset
    pathReversed?: PathReversed
    initialNodeId?: InitialNodeId
    metadata?: Metadata
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface GroupV1 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'group'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 1
  components: {
    name: Name
    entityType: EntityType
    nodeType: NodeType
    nodeColor: NodeColor
    solo: Solo
    locked: Locked
    visibleInViewport: VisibleInViewport
    propertiesExpanded: PropertiesExpanded
    childrenExpanded: ChildrenExpanded
    blendMode: BlendMode
    mask: Mask
    anchorPoint: AnchorPoint
    position: Position
    rotation: Rotation
    opacity: Opacity
    scale: Scale
    scaleLocked: ScaleLocked
    size: Size
    sizeLocked: SizeLocked
    skew: Skew
    startTime?: StartTime
    duration?: Duration
    initialNodeId?: InitialNodeId
    metadata?: Metadata
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface GroupV2 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'group'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 2
  components: {
    name: Name
    entityType: EntityType
    nodeType: NodeType
    nodeColor: NodeColor
    solo: Solo
    locked: Locked
    visibleInViewport: VisibleInViewport
    propertiesExpanded: PropertiesExpanded
    childrenExpanded: ChildrenExpanded
    blendMode: BlendMode
    mask: Mask
    anchorPoint: AnchorPoint
    position: Position
    rotation: Rotation
    opacity: Opacity
    scale: Scale
    scaleLocked: ScaleLocked
    size: Size
    sizeLocked: SizeLocked
    skew: Skew
    version: Version
    startTime?: StartTime
    duration?: Duration
    initialNodeId?: InitialNodeId
    metadata?: Metadata
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface InstanceV1 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'instance'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 1
  components: {
    name: Name
    entityType: EntityType
    childrenExpanded: ChildrenExpanded
    clipContent: ClipContent
    nodeType: NodeType
    nodeColor: NodeColor
    solo: Solo
    locked: Locked
    visibleInViewport: VisibleInViewport
    propertiesExpanded: PropertiesExpanded
    blendMode: BlendMode
    mask: Mask
    strokeAlign: StrokeAlign
    strokeCapStart: StrokeCapStart
    strokeCapEnd: StrokeCapEnd
    strokeJoin: StrokeJoin
    strokeWeight: StrokeWeight
    individualStrokeWeight: IndividualStrokeWeight
    strokeTopWeight: StrokeTopWeight
    strokeRightWeight: StrokeRightWeight
    strokeBottomWeight: StrokeBottomWeight
    strokeLeftWeight: StrokeLeftWeight
    dash: Dash
    dashOffset: DashOffset
    gap: Gap
    smoothCornerRadius: SmoothCornerRadius
    cornerRadius: CornerRadius
    individualCornerRadius: IndividualCornerRadius
    anchorPoint: AnchorPoint
    position: Position
    rotation: Rotation
    opacity: Opacity
    scale: Scale
    scaleLocked: ScaleLocked
    size: Size
    sizeLocked: SizeLocked
    skew: Skew
    mainNodeComponentId: MainNodeComponentId
    topLeftCornerRadius?: TopLeftCornerRadius
    topRightCornerRadius?: TopRightCornerRadius
    bottomRightCornerRadius?: BottomRightCornerRadius
    bottomLeftCornerRadius?: BottomLeftCornerRadius
    startTime?: StartTime
    duration?: Duration
    trimStart?: TrimStart
    trimEnd?: TrimEnd
    trimOffset?: TrimOffset
    pathReversed?: PathReversed
    initialNodeId?: InitialNodeId
    metadata?: Metadata
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface InstanceV2 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'instance'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 2
  components: {
    name: Name
    entityType: EntityType
    childrenExpanded: ChildrenExpanded
    clipContent: ClipContent
    nodeType: NodeType
    nodeColor: NodeColor
    solo: Solo
    locked: Locked
    visibleInViewport: VisibleInViewport
    propertiesExpanded: PropertiesExpanded
    blendMode: BlendMode
    mask: Mask
    strokeAlign: StrokeAlign
    strokeCapStart: StrokeCapStart
    strokeCapEnd: StrokeCapEnd
    strokeJoin: StrokeJoin
    strokeWeight: StrokeWeight
    individualStrokeWeight: IndividualStrokeWeight
    strokeTopWeight: StrokeTopWeight
    strokeRightWeight: StrokeRightWeight
    strokeBottomWeight: StrokeBottomWeight
    strokeLeftWeight: StrokeLeftWeight
    dash: Dash
    dashOffset: DashOffset
    gap: Gap
    smoothCornerRadius: SmoothCornerRadius
    cornerRadius: CornerRadius
    individualCornerRadius: IndividualCornerRadius
    anchorPoint: AnchorPoint
    position: Position
    rotation: Rotation
    opacity: Opacity
    scale: Scale
    scaleLocked: ScaleLocked
    size: Size
    sizeLocked: SizeLocked
    skew: Skew
    mainNodeComponentId: MainNodeComponentId
    version: Version
    topLeftCornerRadius?: TopLeftCornerRadius
    topRightCornerRadius?: TopRightCornerRadius
    bottomRightCornerRadius?: BottomRightCornerRadius
    bottomLeftCornerRadius?: BottomLeftCornerRadius
    startTime?: StartTime
    duration?: Duration
    trimStart?: TrimStart
    trimEnd?: TrimEnd
    trimOffset?: TrimOffset
    pathReversed?: PathReversed
    initialNodeId?: InitialNodeId
    metadata?: Metadata
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface LineV1 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'line'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 1
  components: {
    name: Name
    entityType: EntityType
    nodeType: NodeType
    nodeColor: NodeColor
    solo: Solo
    locked: Locked
    visibleInViewport: VisibleInViewport
    propertiesExpanded: PropertiesExpanded
    blendMode: BlendMode
    mask: Mask
    strokeAlign: StrokeAlign
    strokeCapStart: StrokeCapStart
    strokeCapEnd: StrokeCapEnd
    strokeJoin: StrokeJoin
    strokeWeight: StrokeWeight
    dash: Dash
    dashOffset: DashOffset
    gap: Gap
    anchorPoint: AnchorPoint
    position: Position
    rotation: Rotation
    opacity: Opacity
    scale: Scale
    scaleLocked: ScaleLocked
    size: Size
    sizeLocked: SizeLocked
    skew: Skew
    startTime?: StartTime
    duration?: Duration
    trimStart?: TrimStart
    trimEnd?: TrimEnd
    trimOffset?: TrimOffset
    pathReversed?: PathReversed
    initialNodeId?: InitialNodeId
    metadata?: Metadata
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface LineV2 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'line'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 2
  components: {
    name: Name
    entityType: EntityType
    nodeType: NodeType
    nodeColor: NodeColor
    solo: Solo
    locked: Locked
    visibleInViewport: VisibleInViewport
    propertiesExpanded: PropertiesExpanded
    blendMode: BlendMode
    mask: Mask
    strokeAlign: StrokeAlign
    strokeCapStart: StrokeCapStart
    strokeCapEnd: StrokeCapEnd
    strokeJoin: StrokeJoin
    strokeWeight: StrokeWeight
    dash: Dash
    dashOffset: DashOffset
    gap: Gap
    anchorPoint: AnchorPoint
    position: Position
    rotation: Rotation
    opacity: Opacity
    scale: Scale
    scaleLocked: ScaleLocked
    size: Size
    sizeLocked: SizeLocked
    skew: Skew
    version: Version
    startTime?: StartTime
    duration?: Duration
    trimStart?: TrimStart
    trimEnd?: TrimEnd
    trimOffset?: TrimOffset
    pathReversed?: PathReversed
    initialNodeId?: InitialNodeId
    metadata?: Metadata
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface PolygonV1 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'polygon'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 1
  components: {
    name: Name
    entityType: EntityType
    pointCount: PointCount
    nodeType: NodeType
    nodeColor: NodeColor
    solo: Solo
    locked: Locked
    visibleInViewport: VisibleInViewport
    propertiesExpanded: PropertiesExpanded
    blendMode: BlendMode
    mask: Mask
    strokeAlign: StrokeAlign
    strokeCapStart: StrokeCapStart
    strokeCapEnd: StrokeCapEnd
    strokeJoin: StrokeJoin
    strokeWeight: StrokeWeight
    dash: Dash
    dashOffset: DashOffset
    gap: Gap
    smoothCornerRadius: SmoothCornerRadius
    cornerRadius: CornerRadius
    anchorPoint: AnchorPoint
    position: Position
    rotation: Rotation
    opacity: Opacity
    scale: Scale
    scaleLocked: ScaleLocked
    size: Size
    sizeLocked: SizeLocked
    skew: Skew
    startTime?: StartTime
    duration?: Duration
    trimStart?: TrimStart
    trimEnd?: TrimEnd
    trimOffset?: TrimOffset
    pathReversed?: PathReversed
    initialNodeId?: InitialNodeId
    metadata?: Metadata
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface PolygonV2 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'polygon'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 2
  components: {
    name: Name
    entityType: EntityType
    pointCount: PointCount
    nodeType: NodeType
    nodeColor: NodeColor
    solo: Solo
    locked: Locked
    visibleInViewport: VisibleInViewport
    propertiesExpanded: PropertiesExpanded
    blendMode: BlendMode
    mask: Mask
    strokeAlign: StrokeAlign
    strokeCapStart: StrokeCapStart
    strokeCapEnd: StrokeCapEnd
    strokeJoin: StrokeJoin
    strokeWeight: StrokeWeight
    dash: Dash
    dashOffset: DashOffset
    gap: Gap
    smoothCornerRadius: SmoothCornerRadius
    cornerRadius: CornerRadius
    anchorPoint: AnchorPoint
    position: Position
    rotation: Rotation
    opacity: Opacity
    scale: Scale
    scaleLocked: ScaleLocked
    size: Size
    sizeLocked: SizeLocked
    skew: Skew
    version: Version
    startTime?: StartTime
    duration?: Duration
    trimStart?: TrimStart
    trimEnd?: TrimEnd
    trimOffset?: TrimOffset
    pathReversed?: PathReversed
    initialNodeId?: InitialNodeId
    metadata?: Metadata
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface RectangleV1 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'rectangle'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 1
  components: {
    name: Name
    entityType: EntityType
    nodeType: NodeType
    nodeColor: NodeColor
    solo: Solo
    locked: Locked
    visibleInViewport: VisibleInViewport
    propertiesExpanded: PropertiesExpanded
    blendMode: BlendMode
    mask: Mask
    strokeAlign: StrokeAlign
    strokeCapStart: StrokeCapStart
    strokeCapEnd: StrokeCapEnd
    strokeJoin: StrokeJoin
    strokeWeight: StrokeWeight
    individualStrokeWeight: IndividualStrokeWeight
    strokeTopWeight: StrokeTopWeight
    strokeRightWeight: StrokeRightWeight
    strokeBottomWeight: StrokeBottomWeight
    strokeLeftWeight: StrokeLeftWeight
    dash: Dash
    dashOffset: DashOffset
    gap: Gap
    smoothCornerRadius: SmoothCornerRadius
    cornerRadius: CornerRadius
    individualCornerRadius: IndividualCornerRadius
    anchorPoint: AnchorPoint
    position: Position
    rotation: Rotation
    opacity: Opacity
    scale: Scale
    scaleLocked: ScaleLocked
    size: Size
    sizeLocked: SizeLocked
    skew: Skew
    topLeftCornerRadius?: TopLeftCornerRadius
    topRightCornerRadius?: TopRightCornerRadius
    bottomRightCornerRadius?: BottomRightCornerRadius
    bottomLeftCornerRadius?: BottomLeftCornerRadius
    startTime?: StartTime
    duration?: Duration
    trimStart?: TrimStart
    trimEnd?: TrimEnd
    trimOffset?: TrimOffset
    pathReversed?: PathReversed
    initialNodeId?: InitialNodeId
    metadata?: Metadata
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface RectangleV2 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'rectangle'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 2
  components: {
    name: Name
    entityType: EntityType
    nodeType: NodeType
    nodeColor: NodeColor
    solo: Solo
    locked: Locked
    visibleInViewport: VisibleInViewport
    propertiesExpanded: PropertiesExpanded
    blendMode: BlendMode
    mask: Mask
    strokeAlign: StrokeAlign
    strokeCapStart: StrokeCapStart
    strokeCapEnd: StrokeCapEnd
    strokeJoin: StrokeJoin
    strokeWeight: StrokeWeight
    individualStrokeWeight: IndividualStrokeWeight
    strokeTopWeight: StrokeTopWeight
    strokeRightWeight: StrokeRightWeight
    strokeBottomWeight: StrokeBottomWeight
    strokeLeftWeight: StrokeLeftWeight
    dash: Dash
    dashOffset: DashOffset
    gap: Gap
    smoothCornerRadius: SmoothCornerRadius
    cornerRadius: CornerRadius
    individualCornerRadius: IndividualCornerRadius
    anchorPoint: AnchorPoint
    position: Position
    rotation: Rotation
    opacity: Opacity
    scale: Scale
    scaleLocked: ScaleLocked
    size: Size
    sizeLocked: SizeLocked
    skew: Skew
    version: Version
    topLeftCornerRadius?: TopLeftCornerRadius
    topRightCornerRadius?: TopRightCornerRadius
    bottomRightCornerRadius?: BottomRightCornerRadius
    bottomLeftCornerRadius?: BottomLeftCornerRadius
    startTime?: StartTime
    duration?: Duration
    trimStart?: TrimStart
    trimEnd?: TrimEnd
    trimOffset?: TrimOffset
    pathReversed?: PathReversed
    initialNodeId?: InitialNodeId
    metadata?: Metadata
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface RootV1 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'root'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 1
  components: {
    entityType: EntityType
    startTime: StartTime
    duration: Duration
    name: Name
    fps: Fps
    visibleInViewport: VisibleInViewport
    rgba: Rgba
    initialNodeId?: InitialNodeId
    coverTime?: CoverTime
    metadata?: Metadata
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface StarV1 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'star'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 1
  components: {
    name: Name
    entityType: EntityType
    pointCount: PointCount
    innerRadius: InnerRadius
    nodeType: NodeType
    nodeColor: NodeColor
    solo: Solo
    locked: Locked
    visibleInViewport: VisibleInViewport
    propertiesExpanded: PropertiesExpanded
    blendMode: BlendMode
    mask: Mask
    strokeAlign: StrokeAlign
    strokeCapStart: StrokeCapStart
    strokeCapEnd: StrokeCapEnd
    strokeJoin: StrokeJoin
    strokeWeight: StrokeWeight
    dash: Dash
    dashOffset: DashOffset
    gap: Gap
    smoothCornerRadius: SmoothCornerRadius
    cornerRadius: CornerRadius
    anchorPoint: AnchorPoint
    position: Position
    rotation: Rotation
    opacity: Opacity
    scale: Scale
    scaleLocked: ScaleLocked
    size: Size
    sizeLocked: SizeLocked
    skew: Skew
    startTime?: StartTime
    duration?: Duration
    trimStart?: TrimStart
    trimEnd?: TrimEnd
    trimOffset?: TrimOffset
    pathReversed?: PathReversed
    initialNodeId?: InitialNodeId
    metadata?: Metadata
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface StarV2 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'star'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 2
  components: {
    name: Name
    entityType: EntityType
    pointCount: PointCount
    innerRadius: InnerRadius
    nodeType: NodeType
    nodeColor: NodeColor
    solo: Solo
    locked: Locked
    visibleInViewport: VisibleInViewport
    propertiesExpanded: PropertiesExpanded
    blendMode: BlendMode
    mask: Mask
    strokeAlign: StrokeAlign
    strokeCapStart: StrokeCapStart
    strokeCapEnd: StrokeCapEnd
    strokeJoin: StrokeJoin
    strokeWeight: StrokeWeight
    dash: Dash
    dashOffset: DashOffset
    gap: Gap
    smoothCornerRadius: SmoothCornerRadius
    cornerRadius: CornerRadius
    anchorPoint: AnchorPoint
    position: Position
    rotation: Rotation
    opacity: Opacity
    scale: Scale
    scaleLocked: ScaleLocked
    size: Size
    sizeLocked: SizeLocked
    skew: Skew
    version: Version
    startTime?: StartTime
    duration?: Duration
    trimStart?: TrimStart
    trimEnd?: TrimEnd
    trimOffset?: TrimOffset
    pathReversed?: PathReversed
    initialNodeId?: InitialNodeId
    metadata?: Metadata
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface TextV1 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'text'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 1
  components: {
    name: Name
    entityType: EntityType
    nodeType: NodeType
    vectorPaths: VectorPaths
    nodeColor: NodeColor
    solo: Solo
    locked: Locked
    visibleInViewport: VisibleInViewport
    propertiesExpanded: PropertiesExpanded
    blendMode: BlendMode
    mask: Mask
    strokeAlign: StrokeAlign
    strokeCapStart: StrokeCapStart
    strokeCapEnd: StrokeCapEnd
    strokeJoin: StrokeJoin
    strokeWeight: StrokeWeight
    dash: Dash
    dashOffset: DashOffset
    gap: Gap
    anchorPoint: AnchorPoint
    position: Position
    rotation: Rotation
    opacity: Opacity
    scale: Scale
    scaleLocked: ScaleLocked
    size: Size
    sizeLocked: SizeLocked
    skew: Skew
    sizeBehaviour: SizeBehaviour
    startTime?: StartTime
    duration?: Duration
    trimStart?: TrimStart
    trimEnd?: TrimEnd
    trimOffset?: TrimOffset
    pathReversed?: PathReversed
    initialNodeId?: InitialNodeId
    metadata?: Metadata
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface TextV2 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'text'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 2
  components: {
    name: Name
    entityType: EntityType
    nodeType: NodeType
    vectorPaths: VectorPaths
    nodeColor: NodeColor
    solo: Solo
    locked: Locked
    visibleInViewport: VisibleInViewport
    propertiesExpanded: PropertiesExpanded
    blendMode: BlendMode
    mask: Mask
    strokeAlign: StrokeAlign
    strokeCapStart: StrokeCapStart
    strokeCapEnd: StrokeCapEnd
    strokeJoin: StrokeJoin
    strokeWeight: StrokeWeight
    dash: Dash
    dashOffset: DashOffset
    gap: Gap
    anchorPoint: AnchorPoint
    position: Position
    rotation: Rotation
    opacity: Opacity
    scale: Scale
    scaleLocked: ScaleLocked
    size: Size
    sizeLocked: SizeLocked
    skew: Skew
    sizeBehaviour: SizeBehaviour
    textAlignHorizontal: TextAlignHorizontal
    textAlignVertical: TextAlignVertical
    textAutoResize: TextAutoResize
    textTruncation: TextTruncation
    paragraphIndent: ParagraphIndent
    paragraphSpacing: ParagraphSpacing
    listSpacing: ListSpacing
    hangingPunctuation: HangingPunctuation
    hangingList: HangingList
    autoRename: AutoRename
    version: Version
    startTime?: StartTime
    duration?: Duration
    trimStart?: TrimStart
    trimEnd?: TrimEnd
    trimOffset?: TrimOffset
    pathReversed?: PathReversed
    initialNodeId?: InitialNodeId
    metadata?: Metadata
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface VectorV1 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'vector'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 1
  components: {
    name: Name
    entityType: EntityType
    vectorPaths: VectorPaths
    nodeType: NodeType
    nodeColor: NodeColor
    solo: Solo
    locked: Locked
    visibleInViewport: VisibleInViewport
    propertiesExpanded: PropertiesExpanded
    blendMode: BlendMode
    mask: Mask
    strokeAlign: StrokeAlign
    strokeCapStart: StrokeCapStart
    strokeCapEnd: StrokeCapEnd
    strokeJoin: StrokeJoin
    strokeWeight: StrokeWeight
    dash: Dash
    dashOffset: DashOffset
    gap: Gap
    smoothCornerRadius: SmoothCornerRadius
    cornerRadius: CornerRadius
    anchorPoint: AnchorPoint
    position: Position
    rotation: Rotation
    opacity: Opacity
    scale: Scale
    scaleLocked: ScaleLocked
    size: Size
    sizeLocked: SizeLocked
    skew: Skew
    sizeBehaviour: SizeBehaviour
    startTime?: StartTime
    duration?: Duration
    trimStart?: TrimStart
    trimEnd?: TrimEnd
    trimOffset?: TrimOffset
    pathReversed?: PathReversed
    initialNodeId?: InitialNodeId
    metadata?: Metadata
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface VectorV2 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'vector'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 2
  components: {
    name: Name
    entityType: EntityType
    vectorPaths: VectorPaths
    nodeType: NodeType
    nodeColor: NodeColor
    solo: Solo
    locked: Locked
    visibleInViewport: VisibleInViewport
    propertiesExpanded: PropertiesExpanded
    blendMode: BlendMode
    mask: Mask
    strokeAlign: StrokeAlign
    strokeCapStart: StrokeCapStart
    strokeCapEnd: StrokeCapEnd
    strokeJoin: StrokeJoin
    strokeWeight: StrokeWeight
    dash: Dash
    dashOffset: DashOffset
    gap: Gap
    smoothCornerRadius: SmoothCornerRadius
    cornerRadius: CornerRadius
    anchorPoint: AnchorPoint
    position: Position
    rotation: Rotation
    opacity: Opacity
    scale: Scale
    scaleLocked: ScaleLocked
    size: Size
    sizeLocked: SizeLocked
    skew: Skew
    sizeBehaviour: SizeBehaviour
    version: Version
    startTime?: StartTime
    duration?: Duration
    trimStart?: TrimStart
    trimEnd?: TrimEnd
    trimOffset?: TrimOffset
    pathReversed?: PathReversed
    initialNodeId?: InitialNodeId
    metadata?: Metadata
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface ColorStopV1 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'colorStop'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 1
  components: {
    entityType: EntityType
    blendMode: BlendMode
    visibleInViewport: VisibleInViewport
    propertiesExpanded: PropertiesExpanded
    rgba: Rgba
    progress: Progress
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface ImagePaintV1 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'imagePaint'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 1
  components: {
    entityType: EntityType
    blendMode: BlendMode
    visibleInViewport: VisibleInViewport
    propertiesExpanded: PropertiesExpanded
    paintType: PaintType
    hash: Hash
    scaleType: ScaleType
    imageTransform: ImageTransform
    scalingFactor: ScalingFactor
    rotation: Rotation
    opacity: Opacity
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface LinearGradientPaintV1 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'linearGradientPaint'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 1
  components: {
    entityType: EntityType
    blendMode: BlendMode
    visibleInViewport: VisibleInViewport
    propertiesExpanded: PropertiesExpanded
    opacity: Opacity
    gradientTransform: GradientTransform
    paintType: PaintType
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface RadialGradientPaintV1 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'radialGradientPaint'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 1
  components: {
    entityType: EntityType
    blendMode: BlendMode
    visibleInViewport: VisibleInViewport
    propertiesExpanded: PropertiesExpanded
    opacity: Opacity
    gradientTransform: GradientTransform
    paintType: PaintType
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface SolidPaintV1 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'solidPaint'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 1
  components: {
    entityType: EntityType
    blendMode: BlendMode
    visibleInViewport: VisibleInViewport
    propertiesExpanded: PropertiesExpanded
    rgba: Rgba
    paintType: PaintType
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface VideoPaintV1 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'videoPaint'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 1
  components: {
    entityType: EntityType
    blendMode: BlendMode
    visibleInViewport: VisibleInViewport
    propertiesExpanded: PropertiesExpanded
    paintType: PaintType
    hash: Hash
    scaleType: ScaleType
    videoTransform: VideoTransform
    scalingFactor: ScalingFactor
    rotation: Rotation
    opacity: Opacity
    [k: string]: unknown
  }
  [k: string]: unknown
}
export interface StyledTextSegmentV1 {
  /**
   * Unique entity identifier
   */
  id: string
  /**
   * Type of the entity
   */
  tag: 'styledTextSegment'
  /**
   * Current schema version of the entity
   */
  schemaVersion: 1
  components: {
    entityType: EntityType
    characters: Characters
    startIndex: StartIndex
    endIndex: EndIndex
    fontSize: FontSize
    fontName: FontName
    fontStyle: FontStyle
    textDecoration: TextDecoration
    textCase: TextCase
    letterSpacingUnit: LetterSpacingUnit
    letterSpacingValue: LetterSpacingValue
    textListOptions: TextListOptions
    indetation: Indetation
    metadata?: Metadata
    lineHeightUnit?: LineHeightUnit
    lineHeightValue?: LineHeightValue
    [k: string]: unknown
  }
  [k: string]: unknown
}
